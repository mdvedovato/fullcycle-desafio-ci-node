name: ci-fullcycle-desafio-workflow

on: 
  pull_request:
    branches:
      - develop

jobs:
  check-application:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['20']

    steps:
      # 1. Checkout do código na branch correta
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # Faz checkout na referência do PR

      # 2. Configuração do Node.js
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      # 3. Instala as dependências do projeto
      - run: npm install

      # 4. Executa os testes
      - run: npm test

      # 5. Análise do SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.0.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token do SonarCloud

      # 6. Configuração do QEMU para múltiplas arquiteturas Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 7. Configuração do Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 8. Login no DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Build e push da imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .  # Garante que o contexto do build é o diretório raiz do repositório
          push: true
          tags: mdvedovato/fullcycle-desafio-ci-node:latest  # Substitua pela sua tag correta no DockerHub

# Configuração da proteção da branch para exigir a análise do SonarCloud
  protection:
    required_status_checks:
      strict: true
      contexts:
        - SonarCloud Scan
